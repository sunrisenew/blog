import{_ as a,o as e,c as n,f as t,a as s,e as l}from"./app-DRb6Vypl.js";const i={},o=s("p",null,"CSV文件以纯文本形式存储表格数据。不同于Excel文件复杂的内容格式，纯文本文件可以非常方便地使用Shell命令处理。",-1),p=s("p",null,"在最近的工作中遇到一个问题：客户导出的用户数据有60w条之多，全部保存在一个CSV文件中。要导入系统中遇到了几个问题：",-1),c=s("ol",null,[s("li",null,"由于考虑不周，在导入用户的脚本中没有按行读取CSV文件，而是一次性全部加载到内存中循环处理。在这样的情况下就必须要考虑大数据量导入时内存溢出的问题。"),s("li",null,"每导入一个用户系统都要做触发相关事件等额外操作。这就导致如果是一个文件从头到尾导入，速度会非常慢，时间过长无法接受。期望可以使用多个文件并行导入。"),s("li",null,"期望在导入过程中某一条数据出错导致脚本崩溃时，可以尽可能小范围排查数据，也要尽可能减少重试时检查已导入的数据。")],-1),r=s("p",null,"综合考虑，我们需要把这个巨大的CSV拆分为小文件，每个文件2w行且第一行保留表头。",-1),d=l(`<h2 id="使用split命令拆分文件" tabindex="-1"><a class="header-anchor" href="#使用split命令拆分文件"><span>使用<code>split</code>命令拆分文件</span></a></h2><p><code>split</code>命令可以将一个大文件按文件大小或行数拆分为多个小文件。</p><ol><li>新建一个<code>splitCsv.sh</code>文件，粘贴下面的代码后保存。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">HEADER</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">head</span> <span class="token parameter variable">-1</span> $1<span class="token variable">)</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable">CHUNK</span><span class="token operator">=</span><span class="token variable">$2</span>
<span class="token keyword">else</span>
  <span class="token assign-left variable">CHUNK</span><span class="token operator">=</span><span class="token number">1000</span>
<span class="token keyword">fi</span>
<span class="token function">tail</span> <span class="token parameter variable">-n</span> +2 <span class="token variable">$1</span> <span class="token operator">|</span> <span class="token function">split</span> <span class="token parameter variable">-l</span> <span class="token variable">$CHUNK</span> - <span class="token variable">$1_split_</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$1_split_</span>*<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;1i<span class="token variable">$HEADER</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$i</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>给<code>splitCsv.sh</code>添加可执行权限。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> u+x splitCsv.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>拆分CSV文件。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./splitCsv.sh User.csv <span class="token number">20000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="为文件批量添加-csv后缀名" tabindex="-1"><a class="header-anchor" href="#为文件批量添加-csv后缀名"><span>为文件批量添加<code>.csv</code>后缀名</span></a></h2><p>使用<code>split</code>命令拆分文件后每个分片文件会被加上<code>aa</code>、<code>ab</code>、<code>ac</code>这样的序号后缀（也可以通过加上<code>-d</code>参数指定为数字后缀），如<code>User.csv_split_aa</code>。我们期望拆分出来的每个文件都有相同的<code>.csv</code>后缀。</p><p>执行下面的命令，为<code>User.csv_split_</code>开头的文件加上<code>.csv</code>后缀名。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> User.csv_split_* <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> <span class="token function">mv</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12);function u(v,m){return e(),n("div",null,[o,p,c,r,t(" more "),d])}const k=a(i,[["render",u],["__file","split-csv-by-specified-rows.html.vue"]]),b=JSON.parse('{"path":"/shells/split-csv-by-specified-rows.html","title":"根据指定的行数拆分CSV文件","lang":"zh-CN","frontmatter":{"title":"根据指定的行数拆分CSV文件","tag":["工具","Shell","CSV"],"description":"CSV文件以纯文本形式存储表格数据。不同于Excel文件复杂的内容格式，纯文本文件可以非常方便地使用Shell命令处理。 在最近的工作中遇到一个问题：客户导出的用户数据有60w条之多，全部保存在一个CSV文件中。要导入系统中遇到了几个问题： 由于考虑不周，在导入用户的脚本中没有按行读取CSV文件，而是一次性全部加载到内存中循环处理。在这样的情况下就必须...","head":[["meta",{"property":"og:url","content":"https://blog.sunrisenew.cn/shells/split-csv-by-specified-rows.html"}],["meta",{"property":"og:site_name","content":"sunrisenew"}],["meta",{"property":"og:title","content":"根据指定的行数拆分CSV文件"}],["meta",{"property":"og:description","content":"CSV文件以纯文本形式存储表格数据。不同于Excel文件复杂的内容格式，纯文本文件可以非常方便地使用Shell命令处理。 在最近的工作中遇到一个问题：客户导出的用户数据有60w条之多，全部保存在一个CSV文件中。要导入系统中遇到了几个问题： 由于考虑不周，在导入用户的脚本中没有按行读取CSV文件，而是一次性全部加载到内存中循环处理。在这样的情况下就必须..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T06:00:25.000Z"}],["meta",{"property":"article:author","content":"sunrisenew"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:tag","content":"Shell"}],["meta",{"property":"article:tag","content":"CSV"}],["meta",{"property":"article:modified_time","content":"2024-03-10T06:00:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"根据指定的行数拆分CSV文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-10T06:00:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sunrisenew\\",\\"url\\":\\"https://blog.sunrisenew.cn\\",\\"email\\":\\"sunrisenew@foxmail.com\\"}]}"]]},"headers":[{"level":2,"title":"使用split命令拆分文件","slug":"使用split命令拆分文件","link":"#使用split命令拆分文件","children":[]},{"level":2,"title":"为文件批量添加.csv后缀名","slug":"为文件批量添加-csv后缀名","link":"#为文件批量添加-csv后缀名","children":[]}],"git":{"createdTime":1710050425000,"updatedTime":1710050425000,"contributors":[{"name":"sunrisenew","email":"sunrisenew@foxmail.com","commits":1}]},"readingTime":{"minutes":1.89,"words":567},"filePathRelative":"shells/split-csv-by-specified-rows.md","localizedDate":"2024年3月10日","excerpt":"<p>CSV文件以纯文本形式存储表格数据。不同于Excel文件复杂的内容格式，纯文本文件可以非常方便地使用Shell命令处理。</p>\\n<p>在最近的工作中遇到一个问题：客户导出的用户数据有60w条之多，全部保存在一个CSV文件中。要导入系统中遇到了几个问题：</p>\\n<ol>\\n<li>由于考虑不周，在导入用户的脚本中没有按行读取CSV文件，而是一次性全部加载到内存中循环处理。在这样的情况下就必须要考虑大数据量导入时内存溢出的问题。</li>\\n<li>每导入一个用户系统都要做触发相关事件等额外操作。这就导致如果是一个文件从头到尾导入，速度会非常慢，时间过长无法接受。期望可以使用多个文件并行导入。</li>\\n<li>期望在导入过程中某一条数据出错导致脚本崩溃时，可以尽可能小范围排查数据，也要尽可能减少重试时检查已导入的数据。</li>\\n</ol>\\n<p>综合考虑，我们需要把这个巨大的CSV拆分为小文件，每个文件2w行且第一行保留表头。</p>\\n","autoDesc":true}');export{k as comp,b as data};
