import{_ as n,o as s,c as a,f as e,a as t,e as p}from"./app-DRb6Vypl.js";const o={},i=t("p",null,"一般情况下我们不会直接使用默认的Axios对象来直接发送请求，而是根据项目中的具体情况使用自定义配置创建新的实例，以避免在每个请求中重复配置。",-1),c=p(`<h2 id="使用自定义配置" tabindex="-1"><a class="header-anchor" href="#使用自定义配置"><span>使用自定义配置</span></a></h2><p>新建一个<code>axios.js</code>文件，然后调用<code>axios.create()</code>方法创建自定义实例，传入的参数会成为全局配置，对每个请求都生效。如果个别请求不需要或有其他不同的配置，需要在调用时传参以覆盖。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// axios.js</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">&#39;/api&#39;</span>

<span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/*
   * Config the global baseURL.
   * If the url DO NOT start with this baseURL, you need to override this config in current request.
   */</span>
  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token constant">BASE_URL</span><span class="token punctuation">,</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// To declare that this is an ajax request.</span>
    <span class="token string-property property">&#39;X-Requested-With&#39;</span><span class="token operator">:</span> <span class="token string">&#39;XMLHttpRequest&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Use config &#39;noLoading: true&#39; to disabled loading status for current request.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> instance
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算当前正在执行的请求数量" tabindex="-1"><a class="header-anchor" href="#计算当前正在执行的请求数量"><span>计算当前正在执行的请求数量</span></a></h2><p>在开发一个前后端分离的应用时，只要有API请求还未结束，就需要在页面上显示<code>加载中</code>的提示。要实现这样的功能，我们就要获取到当前正在执行的请求数量。受限于Axios库自身并不提供此类属性，我们可以自己实现，将请求数量挂载到Axios实例上。在此，我们使用Axios提供的拦截器功能来实现。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// axios.js</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Count requests.</span>
  instance<span class="token punctuation">.</span>count <span class="token operator">=</span> instance<span class="token punctuation">.</span>count <span class="token operator">||</span> <span class="token number">0</span>
  instance<span class="token punctuation">.</span>count<span class="token operator">++</span>

  <span class="token keyword">return</span> config
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">decreaseRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">decreaseRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> response
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">decreaseRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">decreaseRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  instance<span class="token punctuation">.</span>count <span class="token operator">=</span> instance<span class="token punctuation">.</span>count <span class="token operator">||</span> <span class="token number">0</span>
  instance<span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>count<span class="token operator">--</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在计算请求数量的同时，我们也可以加入显示<code>加载中</code>状态的逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Count requests.</span>
  instance<span class="token punctuation">.</span>count <span class="token operator">=</span> instance<span class="token punctuation">.</span>count <span class="token operator">||</span> <span class="token number">0</span>
  instance<span class="token punctuation">.</span>count<span class="token operator">++</span>

  <span class="token comment">// Use custom noLoading config to ignore showing loading.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>noLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> config
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">decreaseRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token operator">!</span>instance<span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">decreaseRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token operator">!</span>instance<span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> response
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">decreaseRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token operator">!</span>instance<span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Use debounce to avoid loading flickering.</span>
<span class="token keyword">function</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function l(r,u){return s(),a("div",null,[i,e(" more "),c])}const k=n(o,[["render",l],["__file","create-custom-axios-instance.html.vue"]]),v=JSON.parse('{"path":"/libraries/axios/create-custom-axios-instance.html","title":"创建自定义的Axios实例","lang":"zh-CN","frontmatter":{"title":"创建自定义的Axios实例","tag":["工具库","H5","JavaScript","AJAX"],"description":"一般情况下我们不会直接使用默认的Axios对象来直接发送请求，而是根据项目中的具体情况使用自定义配置创建新的实例，以避免在每个请求中重复配置。 使用自定义配置 新建一个axios.js文件，然后调用axios.create()方法创建自定义实例，传入的参数会成为全局配置，对每个请求都生效。如果个别请求不需要或有其他不同的配置，需要在调用时传参以覆盖。 ...","head":[["meta",{"property":"og:url","content":"https://blog.sunrisenew.cn/libraries/axios/create-custom-axios-instance.html"}],["meta",{"property":"og:site_name","content":"sunrisenew"}],["meta",{"property":"og:title","content":"创建自定义的Axios实例"}],["meta",{"property":"og:description","content":"一般情况下我们不会直接使用默认的Axios对象来直接发送请求，而是根据项目中的具体情况使用自定义配置创建新的实例，以避免在每个请求中重复配置。 使用自定义配置 新建一个axios.js文件，然后调用axios.create()方法创建自定义实例，传入的参数会成为全局配置，对每个请求都生效。如果个别请求不需要或有其他不同的配置，需要在调用时传参以覆盖。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T06:00:25.000Z"}],["meta",{"property":"article:author","content":"sunrisenew"}],["meta",{"property":"article:tag","content":"工具库"}],["meta",{"property":"article:tag","content":"H5"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"AJAX"}],["meta",{"property":"article:modified_time","content":"2024-03-10T06:00:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建自定义的Axios实例\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-10T06:00:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sunrisenew\\",\\"url\\":\\"https://blog.sunrisenew.cn\\",\\"email\\":\\"sunrisenew@foxmail.com\\"}]}"]]},"headers":[{"level":2,"title":"使用自定义配置","slug":"使用自定义配置","link":"#使用自定义配置","children":[]},{"level":2,"title":"计算当前正在执行的请求数量","slug":"计算当前正在执行的请求数量","link":"#计算当前正在执行的请求数量","children":[]}],"git":{"createdTime":1710050425000,"updatedTime":1710050425000,"contributors":[{"name":"sunrisenew","email":"sunrisenew@foxmail.com","commits":1}]},"readingTime":{"minutes":1.65,"words":494},"filePathRelative":"libraries/axios/create-custom-axios-instance.md","localizedDate":"2024年3月10日","excerpt":"<p>一般情况下我们不会直接使用默认的Axios对象来直接发送请求，而是根据项目中的具体情况使用自定义配置创建新的实例，以避免在每个请求中重复配置。</p>\\n","autoDesc":true}');export{k as comp,v as data};
